function [volDat, volLabels, jsonSeriesInfo] = get_ISD_series(sel)

ServerAddress = '172.23.202.191';  % ISD instance at Yale
urlServer = ['http://' ServerAddress];
myApiKey = '49eb1753-29bb-465c-8961-226da340b5a9';
% prefix_data_path = 'D:/DiscoveryData/';

%% select series
if ok
    % user did not cancel:
    % continue by retrieving series information of selected study
    jsonSeriesInfo = isdRestGetSeriesInfo(urlServer, myApiKey, sel);
    
    % convert JSON structs to human readable form for selection dialog
    promptStr = 'Modality | Series Number | Series Description | Series Time | Number of Images';
    nSeries = numel(jsonSeriesInfo);
    listStrings = cell(nSeries,1);
    for idx = 1:nSeries
        % introduce separator string in case of multiple modalities (e.g. PET/CT) 
        seriesTime = jsonSeriesInfo{idx}.MainDicomTags.SeriesTime;
        if length(seriesTime) >= 6
            if length(seriesTime) > 6
                splitSecond = ['.' seriesTime(7:end)];
            else
                splitSecond = '';
            end
            seriesTime = [seriesTime(1:2) ':' seriesTime(3:4) ':' seriesTime(5:6) splitSecond];
        end
        listStrings{idx} = sprintf('%s | %s | %s | %s | %d | %s',...
            jsonSeriesInfo{idx}.MainDicomTags.Modality, ...
            jsonSeriesInfo{idx}.MainDicomTags.SeriesNumber, ...
            jsonSeriesInfo{idx}.MainDicomTags.SeriesDescription, ...
            seriesTime, ...
            jsonSeriesInfo{idx}.ExpectedNumberofInstances);
    end
    [sel, ok] = listdlg('ListString',listStrings, ...
                    'PromptString', promptStr,...
                    'Name', 'Series list', ...
                    'SelectionMode','single',...
                    'ListSize', [500, 300] ...
                    );
end

%% select VOIs
if ok
    % user did not cancel:
    % continue by retrieving series information of selected study
    jsonVOIsInfo = isdRestGetVOIsInfo(urlServer,myApiKey, jsonSeriesInfo{sel});
   
    % convert JSON structs to human readable form for selection dialog
    promptStr = 'Name | CreationTime | ModificationTime | NumberOfVoxels';
    nVOIs = numel(jsonVOIsInfo);
    listStrings = cell(nVOIs,1);
    for idx = 1:nVOIs
        listStrings{idx} = sprintf('%s | %s | %s | %dx%dx%d',...
            jsonVOIsInfo{idx}.Name, ...
            jsonVOIsInfo{idx}.CreationTime, ...
            jsonVOIsInfo{idx}.ModificationTime, ...
            jsonVOIsInfo{idx}.NumberOfVoxels.X, ...
            jsonVOIsInfo{idx}.NumberOfVoxels.Y, ...
            jsonVOIsInfo{idx}.NumberOfVoxels.Z);
    end
    [sel, ok] = listdlg('ListString',listStrings, ...
                    'PromptString', promptStr,...
                    'Name', 'Series list', ...
                    'SelectionMode','single',...
                    'ListSize', [500, 300] ...
                    );

    % user did not cancel:
    % continue by retrieving series information of selected study
    [volDat, jsonVolInfo] = isdRestReadVOI (urlServer, myApiKey,...
                                jsonVOIsInfo{sel}, 'D:\DiscoveryData');

    volLabels = 'None';
    % disp(volDat)
    % showVolumeData(volDat);

%% select selected series
else
    % user did not cancel: now load the volume
    [volDat, jsonVolInfo] = isdRestReadSeries (urlServer, myApiKey,...
                                jsonSeriesInfo{sel}, 'D:\DiscoveryData');
    if size(volDat,4) > 1
        % for 4D data, subtract first image
        sizeVol = size(volDat);
        subVol = zeros([sizeVol(1:3) (sizeVol(4)-1)]);
        for idx=1:size(subVol,4)
            subVol(:,:,:,idx) = volDat(:,:,:,idx+1) - volDat(:,:,:,1);
        end
        volDat = {volDat subVol};
        volLabels = cell(2,1);
        volLabels{1} = sprintf('%s (SN: %s)', ...
            jsonSeriesInfo{sel}.MainDicomTags.SeriesDescription, ...
            jsonSeriesInfo{sel}.MainDicomTags.SeriesNumber);
        volLabels{2} = sprintf('sub-%s (SN: %s)', ...
            jsonSeriesInfo{sel}.MainDicomTags.SeriesDescription, ...
            jsonSeriesInfo{sel}.MainDicomTags.SeriesNumber);
    else
        % for 3D data, create inverted image
        volDat = {volDat, (-1)*volDat};
        volLabels = cell(2,1);
        volLabels{1} = sprintf('%s (SN: %s)', ...
            jsonSeriesInfo{sel}.MainDicomTags.SeriesDescription, ...
            jsonSeriesInfo{sel}.MainDicomTags.SeriesNumber);
        volLabels{2} = sprintf('inv-%s (SN: %s)', ...
            jsonSeriesInfo{sel}.MainDicomTags.SeriesDescription, ...
            jsonSeriesInfo{sel}.MainDicomTags.SeriesNumber);
    end
    
 %   showVolumeData(volDat, ...
 %       'figureTitle', sprintf('%s (DoB: %s) on %s', ...
 %           jsonPatientsInfo{selPat}.MainDicomTags.PatientName, ...
 %           jsonPatientsInfo{selPat}.MainDicomTags.PatientBirthDate, ...
 %           jsonSeriesInfo{sel}.MainDicomTags.SeriesDate), ...
 %       'volLabels', volLabels);
end
end % function