function [pre, art, liver_mask, tumor_mask] = read_ISD_series(varargin)

ServerAddress = '172.23.202.191';  % ISD instance at Yale
urlServer = ['http://' ServerAddress];
myApiKey = '49eb1753-29bb-465c-8961-226da340b5a9';
% local folder to store binary data retrieved from server
% prefix_data_path = 'D:/DiscoveryData/';

%% select patient
% get patient information
jsonPatientsInfo = isdRestGetPatientsInfo(urlServer,myApiKey);
% convert JSON structs to human readable form for selection dialog
promptStr = 'Patient ID | Number of Studies';
nPat = numel(jsonPatientsInfo);
listStrings = cell(nPat,1);
for idx=1:nPat
    listStrings{idx} = sprintf('%s | %d', ...
        jsonPatientsInfo{idx}.MainDicomTags.PatientID, ...
        numel(jsonPatientsInfo{idx}.Studies));
end
% let user select the patient
[selPat, ok] = listdlg('ListString',listStrings, ...
                'PromptString', promptStr,...
                'Name', 'Patient List', ...
                'SelectionMode','single',...
                'ListSize', [500, 300] ...
                );
          
%% select study
if ok
    % user did not cancel:
    % continue by retrieving study information of selected patient
    jsonStudiesInfo = isdRestGetStudiesInfo(urlServer,myApiKey,jsonPatientsInfo{selPat});
    
    % convert JSON structs to human readable form for selection dialog
    promptStr = 'Modality | Study Date | Study Description | Number of Series | Study ID';
    nStudies = numel(jsonStudiesInfo);
    listStrings = cell(nStudies,1);
    for idx = 1:nStudies
        % introduce separator string in case of multiple modalities (e.g. PET/CT) 
        modalities = sprintf('%s / ',jsonStudiesInfo{idx}.Modalities{:});
        modalities = modalities(1:end-3);   % strip trailing ' / '
        listStrings{idx} = sprintf('%s | %s | %s | %d | %s',...
            modalities, ...
            regexprep(jsonStudiesInfo{idx}.DateAndTime,'T', ' ', 'once'), ...
            jsonStudiesInfo{idx}.MainDicomTags.StudyDescription, ...
            numel(jsonStudiesInfo{idx}.Series), ...
            jsonStudiesInfo{idx}.MainDicomTags.StudyID);
    end
    [sel, ok] = listdlg('ListString',listStrings, ...
                    'PromptString', promptStr,...
                    'Name', 'Study list', ...
                    'SelectionMode','single',...
                    'ListSize', [500, 300] ...
                    );
end

%% select series
if ok
    get_ISD_series(jsonStudiesInfo{sel})
end


%% select VOIs
if ok & size(varargin,2) > 0 & varargin{1} == 'mask'
    % user did not cancel:
    % continue by retrieving series information of selected study
    jsonVOIsInfo = isdRestGetVOIsInfo(urlServer,myApiKey, jsonSeriesInfo{sel});
   
    % convert JSON structs to human readable form for selection dialog
    promptStr = 'Name | CreationTime | ModificationTime | NumberOfVoxels';
    nVOIs = numel(jsonVOIsInfo);
    listStrings = cell(nVOIs,1);
    for idx = 1:nVOIs
        listStrings{idx} = sprintf('%s | %s | %s | %dx%dx%d',...
            jsonVOIsInfo{idx}.Name, ...
            jsonVOIsInfo{idx}.CreationTime, ...
            jsonVOIsInfo{idx}.ModificationTime, ...
            jsonVOIsInfo{idx}.NumberOfVoxels.X, ...
            jsonVOIsInfo{idx}.NumberOfVoxels.Y, ...
            jsonVOIsInfo{idx}.NumberOfVoxels.Z);
    end
    [sel, ok] = listdlg('ListString',listStrings, ...
                    'PromptString', promptStr,...
                    'Name', 'Series list', ...
                    'SelectionMode','single',...
                    'ListSize', [500, 300] ...
                    );

    % user did not cancel:
    % continue by retrieving series information of selected study
    [volDat, jsonVolInfo] = isdRestReadVOI (urlServer, myApiKey,...
                                jsonVOIsInfo{sel}, 'D:\DiscoveryData');

    volLabels = 'None';
    % disp(volDat)
    % showVolumeData(volDat);

%% select selected series
else
    % user did not cancel: now load the volume
    [volDat, jsonVolInfo] = isdRestReadSeries (urlServer, myApiKey,...
                                jsonSeriesInfo{sel}, 'D:\DiscoveryData');
    if size(volDat,4) > 1
        % for 4D data, subtract first image
        sizeVol = size(volDat);
        subVol = zeros([sizeVol(1:3) (sizeVol(4)-1)]);
        for idx=1:size(subVol,4)
            subVol(:,:,:,idx) = volDat(:,:,:,idx+1) - volDat(:,:,:,1);
        end
        volDat = {volDat subVol};
        volLabels = cell(2,1);
        volLabels{1} = sprintf('%s (SN: %s)', ...
            jsonSeriesInfo{sel}.MainDicomTags.SeriesDescription, ...
            jsonSeriesInfo{sel}.MainDicomTags.SeriesNumber);
        volLabels{2} = sprintf('sub-%s (SN: %s)', ...
            jsonSeriesInfo{sel}.MainDicomTags.SeriesDescription, ...
            jsonSeriesInfo{sel}.MainDicomTags.SeriesNumber);
    else
        % for 3D data, create inverted image
        volDat = {volDat, (-1)*volDat};
        volLabels = cell(2,1);
        volLabels{1} = sprintf('%s (SN: %s)', ...
            jsonSeriesInfo{sel}.MainDicomTags.SeriesDescription, ...
            jsonSeriesInfo{sel}.MainDicomTags.SeriesNumber);
        volLabels{2} = sprintf('inv-%s (SN: %s)', ...
            jsonSeriesInfo{sel}.MainDicomTags.SeriesDescription, ...
            jsonSeriesInfo{sel}.MainDicomTags.SeriesNumber);
    end
    
 %   showVolumeData(volDat, ...
 %       'figureTitle', sprintf('%s (DoB: %s) on %s', ...
 %           jsonPatientsInfo{selPat}.MainDicomTags.PatientName, ...
 %           jsonPatientsInfo{selPat}.MainDicomTags.PatientBirthDate, ...
 %           jsonSeriesInfo{sel}.MainDicomTags.SeriesDate), ...
 %       'volLabels', volLabels);
end
end % function